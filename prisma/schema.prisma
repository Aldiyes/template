generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  password              String?
  image                 String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  accounts              Account[]
  Task                  Task[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

enum UserRole {
  USER
  ADMIN
}

model Task {
  id        String      @id @default(cuid())
  userId    String
  title     String      @unique @db.Text
  completed Boolean     @default(false)
  important Important[]
  planned   Planned[]
  myDay     MyDay[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MyDay {
  id        String @id @default(cuid())
  taskId    String
  plannedId String

  task    Task    @relation(fields: [taskId], references: [id])
  planned Planned @relation(fields: [plannedId], references: [id])
}

model Important {
  id        String @id @default(cuid())
  taskId    String
  plannedId String

  task    Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  planned Planned @relation(fields: [plannedId], references: [id], onDelete: Cascade)
}

model Planned {
  id        String      @id @default(cuid())
  taskId    String
  dueDate   DateTime
  important Important[]
  myDay     MyDay[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
}
